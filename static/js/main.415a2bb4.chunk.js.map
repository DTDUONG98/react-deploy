{"version":3,"sources":["serviceWorker.js","Step1.js","Step2.js","Step3.js","Step4.js","index.js"],"names":["Boolean","window","location","hostname","match","currencies","value","label","useStyles","makeStyles","theme","root","margin","spacing","width","button","marginTop","data","dishes","marginLeft","review","padding","ReactDOM","render","exact","path","component","props","classes","React","useState","currency","setCurrency","people","setPepple","Container","className","noValidate","autoComplete","TextField","id","select","onChange","event","target","variant","map","option","MenuItem","key","type","Button","onClick","meal","e","console","log","history","push","pathname","state","People","color","restaurant","setRestaurant","DataRestaurant","element","availableMeals","dish","setDish","servings","setServings","DataDish","name","IconButton","aria-label","currentTarget","spacingvalue","alert","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.415a2bb4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Button, MenuItem, TextField } from '@material-ui/core';\r\n\r\nconst currencies = [\r\n  {\r\n    value: '1',\r\n    label: 'breakfast',\r\n  },\r\n  {\r\n    value: '2',\r\n    label: 'lunch',\r\n  },\r\n  {\r\n    value: '3',\r\n    label: 'dinner',\r\n  },\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n  button: {\r\n    marginTop: '50px'\r\n  }\r\n}));\r\n\r\nexport default function MultilineTextFields(props) {\r\n  const classes = useStyles();\r\n  const [currency, setCurrency] = React.useState('EUR');\r\n  const [people, setPepple] = React.useState('')\r\n\r\n  const handleChange = (event) => {\r\n    setCurrency(event.target.value);\r\n  };\r\n  const handleChangePeople = (event) =>{\r\n    setPepple(event.target.value)\r\n  }\r\n  const handleClick = (event) => {{\r\n    let meal = \"\"\r\n    currencies.map((e) => {\r\n      if(e.value == currency){\r\n        meal = e.label\r\n      }\r\n    })\r\n    console.log('OK')\r\n    props.history.push({\r\n      pathname: `/react-deploy/Step2/${meal}`,\r\n      state : {People: people, meal: meal}\r\n    })\r\n  }}\r\n\r\n  return (\r\n    <Container>\r\n      <form className={classes.root} noValidate autoComplete=\"off\">\r\n        <div>\r\n          <p>Please select a meal</p>\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            select\r\n            value={currency}\r\n            onChange={handleChange}\r\n            variant=\"outlined\"\r\n          >\r\n            {currencies.map((option) => (\r\n              <MenuItem key={option.value} value={option.value}>\r\n                {option.label}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n          <p>Please Enter Number of People</p>\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            type=\"number\"\r\n            variant=\"outlined\"\r\n            value={people}\r\n            onChange={handleChangePeople}\r\n          >\r\n          </TextField>\r\n        </div>\r\n      </form>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={handleClick}\r\n        color=\"primary\"\r\n        className={classes.button}\r\n      >\r\n        Next\r\n      </Button>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Button, MenuItem, TextField } from '@material-ui/core';\r\nimport dishes from './data/dishes.json'\r\n\r\nconst data = dishes.dishes\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n    button: {\r\n        marginTop: '50px',\r\n        marginLeft: '50px'\r\n      }\r\n}));\r\n\r\nexport default function MultilineTextFields(props) {\r\n    const classes = useStyles();\r\n    const [restaurant, setRestaurant] = React.useState('EUR');\r\n\r\n    const DataRestaurant = []\r\n    data.map(element => {\r\n        for (let value of element.availableMeals) {\r\n            if (props.location.state.meal == value) {\r\n                DataRestaurant.push(element)\r\n            }\r\n        }\r\n    })\r\n    console.log(DataRestaurant)\r\n\r\n    const handleChange = (event) => {\r\n        setRestaurant(event.target.value);\r\n    };\r\n    const handleClickNext = (event) => {{\r\n        props.history.push({\r\n            pathname: `/react-deploy/Step3/${restaurant}`,\r\n            state : {\r\n                People: props.location.state.People,\r\n                meal: props.location.state.meal,\r\n                restaurant: restaurant\r\n            }\r\n          })\r\n    }}\r\n    const handleClickBack = (event) => {\r\n        {\r\n            console.log('Back')\r\n            props.history.push('/react-deploy/')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n                <div>\r\n                    <p>Please select a Restaurant</p>\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        select\r\n                        value={restaurant}\r\n                        onChange={handleChange}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        {DataRestaurant.map((element) => (\r\n                            <MenuItem key={element.id} value={element.restaurant}>\r\n                                {element.restaurant}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                </div>\r\n            </form>\r\n            <Button\r\n                variant=\"contained\"\r\n                onClick={handleClickBack}\r\n                color=\"primary\"\r\n                className={classes.button}\r\n            >\r\n                Previouss\r\n      </Button>\r\n            <Button\r\n                variant=\"contained\"\r\n                onClick={handleClickNext}\r\n                color=\"primary\"\r\n                className={classes.button}\r\n            >\r\n                Next\r\n      </Button>\r\n        </Container>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Button, MenuItem, TextField, IconButton } from '@material-ui/core';\r\nimport dishes from './data/dishes.json'\r\nimport AddIcon from '@material-ui/icons/AddCircleOutline'\r\n\r\nconst data = dishes.dishes\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n    button: {\r\n        marginTop: '50px',\r\n        marginLeft: '50px'\r\n    }\r\n}));\r\n\r\nexport default function MultilineTextFields(props) {\r\n    const classes = useStyles();\r\n    const [dish, setDish] = React.useState('EUR');\r\n    const [servings, setServings] = React.useState('1')\r\n\r\n    const DataDish = []\r\n    data.map((element) => {\r\n        if (element.restaurant == props.location.state.restaurant) {\r\n            DataDish.push(element)\r\n        }\r\n    })\r\n    // set Dish\r\n    const handleChange = (event) => {\r\n        setDish(event.target.value);\r\n    };\r\n    // set number of servings\r\n    const handleChangeServings = (event) => {\r\n        setServings(event.target.value)\r\n    }\r\n    // changePage\r\n    const handleClickNext = (event) => {\r\n        {\r\n            props.history.push({\r\n                pathname: `/react-deploy/Step4/review`,\r\n                state: {\r\n                    People: props.location.state.People,\r\n                    meal: props.location.state.meal,\r\n                    restaurant: props.location.state.restaurant,\r\n                    dish: dish,\r\n                    servings: servings\r\n                }\r\n            })\r\n        }\r\n    }\r\n    const handleClickBack = (event) => {\r\n        {\r\n            props.history.push({\r\n                pathname: `/react-deploy/Step2/${props.location.state.meal}`,\r\n                state: {\r\n                    meal: props.location.state.meal\r\n                }\r\n            })\r\n        }\r\n    }\r\n    const handleAddDish = (event) => {\r\n        console.log(event.currentTarget.spacingvalue)\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n                <div>\r\n                    <p>Please select a Dish</p>\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        select\r\n                        value={dish}\r\n                        onChange={handleChange}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        {DataDish.map((element) => (\r\n                            <MenuItem key={element.id} value={element.name}>\r\n                                {element.name}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                    <IconButton aria-label=\"add\">\r\n                        <AddIcon onClick={handleAddDish} value=\"2\" />\r\n                    </IconButton>\r\n                    <p>Please Enter no. of servings</p>\r\n                    <TextField\r\n                        id=\"outlined-basic\"\r\n                        type=\"number\"\r\n                        variant=\"outlined\"\r\n                        value={servings}\r\n                        onChange={handleChangeServings}\r\n                    >\r\n                    </TextField>\r\n                </div>\r\n            </form>\r\n            <Button\r\n                variant=\"contained\"\r\n                onClick={handleClickBack}\r\n                color=\"primary\"\r\n                className={classes.button}\r\n            >\r\n                Previous\r\n      </Button>\r\n            <Button\r\n                variant=\"contained\"\r\n                onClick={handleClickNext}\r\n                color=\"primary\"\r\n                className={classes.button}\r\n            >\r\n                Next\r\n      </Button>\r\n        </Container>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Button, MenuItem, TextField } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n  button: {\r\n    marginTop: '50px',\r\n    marginLeft: '50px'\r\n  },\r\n  review: {\r\n      padding: '50px'\r\n  }\r\n}));\r\n\r\nexport default function MultilineTextFields(props) {\r\n  const classes = useStyles();\r\n\r\n  const handleClickSubmit = (event) => {\r\n      alert('Bạn đã đặt hàng thành công. Cảm ơn bạn đã Ủng hộ chúng tôi!')\r\n  }\r\n  const handleClickBack = (event) => {{\r\n    props.history.push({\r\n        pathname: `/react-deploy/Step3/${props.location.state.restaurant}`,\r\n        state : {\r\n            People: props.location.state.People,\r\n            meal: props.location.state.meal,\r\n            restaurant: props.location.state.restaurant\r\n        }\r\n      })\r\n  }}\r\n  const {People, meal, dish, restaurant, servings} = props.location.state\r\n  console.log(People, meal, dish, restaurant, servings)\r\n\r\n  return (\r\n    <Container>\r\n      <form className={classes.root} noValidate autoComplete=\"off\">\r\n        <div className={classes.review}>\r\n            <span>Meal : </span> {meal} <br/><br/>\r\n            <span>No of People : </span> {People} <br/><br/>\r\n            <span>Restaurant : </span> {restaurant} <br/><br/>\r\n            <span>Dish : </span> {dish} -{servings}  <br/>\r\n        </div>\r\n      </form>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={handleClickBack}\r\n        color=\"primary\"\r\n        className={classes.button}\r\n      >\r\n        Previous\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={handleClickSubmit}\r\n        color=\"primary\"\r\n        className={classes.button}\r\n      >\r\n        Submit\r\n      </Button>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Route, Router, browserHistory } from '../node_modules/react-router';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport Step1 from './Step1'\nimport Step2 from './Step2'\nimport Step3 from './Step3'\nimport Step4 from './Step4'\n\nReactDOM.render(\n    <BrowserRouter>\n        <Route exact path=\"/react-deploy/\" component={Step1} />\n        <Route exact path=\"/react-deploy/Step2/:id\" component={Step2} />\n        <Route exact path=\"/react-deploy/Step3/:id\" component={Step3} />\n        <Route exact path=\"/react-deploy/Step4/:id\" component={Step4} />\n    </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}